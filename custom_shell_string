#include "custom_shell.h"

/**
 * custom_strcpy - copies a string
 * @destination: the destination
 * @source: the source
 *
 * Return: pointer to destination
 */
char *custom_strcpy(char *destination, char *source)
{
	int index = 0;

	if (destination == source || source == NULL)
		return (destination);

	while (source[index])
	{
		destination[index] = source[index];
		index++;
	}
	destination[index] = '\0';
	return (destination);
}

/**
 * custom_strdup - duplicates a string
 * @str_to_duplicate: the string to duplicate
 *
 * Return: pointer to the duplicated string
 */
char *custom_strdup(const char *str_to_duplicate)
{
	int length = 0;
	char *duplicate;

	if (str_to_duplicate == NULL)
		return (NULL);

	while (*str_to_duplicate++)
		length++;

	duplicate = malloc(sizeof(char) * (length + 1));
	if (!duplicate)
		return (NULL);

	for (length++; length--;)
		duplicate[length] = *--str_to_duplicate;

	return (duplicate);
}

/**
 * custom_puts - prints an input string
 * @str: the string to be printed
 *
 * Return: Nothing
 */
void custom_puts(char *str)
{
	int index = 0;

	if (!str)
		return;

	while (str[index] != '\0')
	{
		custom_putchar(str[index]);
		index++;
	}
}

/**
 * custom_putchar - writes the character c to stdout
 * @character: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int custom_putchar(char character)
{
	static int i;
	static char buffer[WRITE_BUFFER_SIZE];

	if (character == BUFFER_FLUSH || i >= WRITE_BUFFER_SIZE)
	{
		write(1, buffer, i);
		i = 0;
	}

	if (character != BUFFER_FLUSH)
		buffer[i++] = character;

	return (1);
}
